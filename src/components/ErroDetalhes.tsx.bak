import React, { useState } from 'react';
import { AlertTriangle, CheckCircle, Clock, X, FileText } from 'lucide-react';
import type { ErroAutomacao } from '../services/api';

interface ErroDetalhesProps {
  erro: ErroAutomacao;
  onResolver: (id: string) => void;
}

export function ErroDetalhes({ erro, onResolver }: ErroDetalhesProps) {
  const [showLogModal, setShowLogModal] = useState(false);

  return (
    <>
      <div className={`border rounded-lg p-4 ${
        erro.resolvido ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'
      }`}>
        <div className="flex items-start justify-between">
          <div className="flex items-start space-x-3">
            <div className="flex-shrink-0 mt-1">
              {erro.resolvido ? (
                <CheckCircle className="h-5 w-5 text-green-500" />
              ) : (
                <AlertTriangle className="h-5 w-5 text-red-500" />
              )}
            </div>
            <div>
              <div className="flex items-center space-x-2">
                <h3 className="text-sm font-medium text-gray-900">{erro.nome_usuario}</h3>
                <span className="text-sm text-gray-500">({erro.email})</span>
              </div>
              <p className="mt-1 text-sm text-gray-700 whitespace-pre-wrap">{erro.erro}</p>
              <div className="mt-2 flex items-center text-xs text-gray-500">
                <Clock className="h-4 w-4 mr-1" />
                <time dateTime={erro.data}>
                  {new Date(erro.data).toLocaleString('pt-BR', {
                    dateStyle: 'long',
                    timeStyle: 'medium'
                  })}
                </time>
              </div>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <button
              onClick={() => setShowLogModal(true)}
              className="inline-flex items-center px-3 py-1.5 border border-gray-300 text-xs font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              <FileText className="h-4 w-4 mr-1" />
              Ver Log
            </button>
            {!erro.resolvido && (
              <button
                onClick={() => onResolver(erro.id)}
                className="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
              >
                Marcar como resolvido
              </button>
            )}
          </div>
        </div>
      </div>

      {showLogModal && (
        <div className="fixed z-10 inset-0 overflow-y-auto">
          <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={() => setShowLogModal(false)} />

            <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full">
              <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div className="flex justify-between items-start">
                  <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">
                    Log Detalhado do Erro
                  </h3>
                  <button
                    onClick={() => setShowLogModal(false)}
                    className="rounded-md text-gray-400 hover:text-gray-500 focus:outline-none"
                  >
                    <X className="h-6 w-6" />
                  </button>
                </div>
                <div className="mt-2">
                  <div className="bg-gray-100 p-4 rounded-lg overflow-x-auto">
                    <pre className="text-sm text-gray-800 whitespace-pre-wrap font-mono">
                      {`Detalhes do Erro:
Usuário: ${erro.nome_usuario} (${erro.email})
Data: ${new Date(erro.data).toLocaleString('pt-BR')}
Status: ${erro.resolvido ? 'Resolvido' : 'Não Resolvido'}

Mensagem de Erro:
${erro.erro}

Stack Trace:
${erro.erro.includes('Traceback') ? erro.erro : 'Stack trace não disponível'}

Informações Adicionais:
- ID do Erro: ${erro.id}
- Timestamp: ${new Date(erro.data).getTime()}
- Ambiente: Produção
`}
                    </pre>
                  </div>
                </div>
              </div>
              <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button
                  type="button"
                  className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                  onClick={() => setShowLogModal(false)}
                >
                  Fechar
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
}
